
import React, { useMemo } from 'react';
import { Well, PlateView, Theme, PlateFormat, ConcentrationUnit, CheckerboardConfig } from '../types';
import WellComponent from './WellComponent';

interface PlateGridProps {
    plateFormat: PlateFormat;
    plateData: Well[];
    selectedWells: string[];
    handleSelectWell: (wellId: string, event: React.MouseEvent) => void;
    view: PlateView;
    theme: Theme;
    concentrationUnit: ConcentrationUnit;
}

const PlateGrid: React.FC<PlateGridProps> = ({ plateFormat, plateData, selectedWells, handleSelectWell, view, theme, concentrationUnit }) => {
    const plateMap = new Map(plateData.map(well => [well.id, well]));
    const maxConcentration = Math.max(...plateData.map(w => w.concentration), 0);

    const checkerboardConfig = useMemo((): CheckerboardConfig | null => {
        // Heuristic to detect a checkerboard layout
        const comboWell = plateData.find(w => w.compound.includes(' + '));
        if (!comboWell) return null;

        const nameParts = comboWell.compound.split(' + ');
        if (nameParts.length !== 2) return null;
        const drugAName = nameParts[0].trim();
        const drugBName = nameParts[1].trim();

        const highestAWell = plateData.find(w => w.id === 'A1' && w.compound === drugAName);
        const highestBWell = plateData.find(w => w.id === 'H12' && w.compound === drugBName);
        
        if (!highestAWell || !highestBWell || highestAWell.concentration === 0 || highestBWell.concentration === 0) {
            return null; // Not a standard checkerboard generated by our tool
        }

        const nextAWell = plateData.find(w => w.id === 'B1' && w.compound === drugAName);
        let factor = 2; // Default dilution factor
        if (nextAWell && nextAWell.concentration > 0) {
            const calculatedFactor = highestAWell.concentration / nextAWell.concentration;
            if (calculatedFactor > 1) {
                factor = calculatedFactor;
            }
        }

        return {
            drugAName,
            drugBName,
            maxConcA: highestAWell.concentration,
            maxConcB: highestBWell.concentration,
            factor,
            colorA: '#38bdf8', // A nice blue (tailwind sky-400)
            colorB: '#facc15', // A nice yellow (tailwind yellow-400)
            mwA: highestAWell.mw,
            mwB: highestBWell.mw,
        };
    }, [plateData]);
    
    return (
        <div className="flex flex-col items-center justify-center space-y-2">
             <h2 className="text-xl font-bold text-gray-800 dark:text-gray-200">Plate Layout ({view})</h2>
             <div className="grid gap-1" style={{ gridTemplateColumns: `auto repeat(${plateFormat.cols}, minmax(0, 1fr))` }}>
                {/* Corner empty cell */}
                <div></div>
                {/* Column Headers */}
                {plateFormat.colLabels.map(label => (
                    <div key={label} className="flex items-center justify-center h-8 font-semibold text-gray-600 dark:text-gray-400">
                        {label}
                    </div>
                ))}

                {/* Rows with Headers */}
                {plateFormat.rowLabels.map((rowLabel, rowIndex) => (
                    <React.Fragment key={rowLabel}>
                        <div className="flex items-center justify-center w-8 font-semibold text-gray-600 dark:text-gray-400">
                            {rowLabel}
                        </div>
                        {plateFormat.colLabels.map((colLabel, colIndex) => {
                            const wellId = `${rowLabel}${colLabel}`;
                            const well = plateMap.get(wellId);
                            if (!well) return null;

                            return (
                                <WellComponent
                                    key={wellId}
                                    well={well}
                                    isSelected={selectedWells.includes(wellId)}
                                    onClick={(e) => handleSelectWell(wellId, e)}
                                    view={view}
                                    theme={theme}
                                    maxConcentration={maxConcentration}
                                    concentrationUnit={concentrationUnit}
                                    plateFormat={plateFormat}
                                    checkerboardConfig={checkerboardConfig}
                                />
                            );
                        })}
                    </React.Fragment>
                ))}
            </div>
        </div>
    );
};

export default PlateGrid;